"""
encrypt and decrypt data using AES-128 and RSA.
1. takes four command line arguments: 
    a single flag (-e or -d) indicating whether the program will encrypt or decrypt a message, 
    the name of the public or private key file to use (generated by keygen.py), 
    the name of the file to encrypt or decrypt, 
    and the name of the output file. 
        ./crypt.py -e alice.pub secret.txt secret.cip
        ./crypt.py -d alice.prv secret.cip secret.txt
2. To encrypt a file, the program must generate a random key K for AES-128 
    using random.SystemRandom or os.urandom(), 
    use the key K with AES-128 to encrypt the data from the input file, 
    use RSA with the public key file specified on the command line to encrypt K 
    (we refer to the encrypted K as K’ in the following), 
    and write the encrypted data and K’ to the output file. 
    The format of the output file (how to store K’ along with the encrypted data) is your choice.   
3. To decrypt a file, the program must read the encrypted data and K’ from the input file, 
    RSA-decrypt K’ to recover the key K, use K with AES-128 to decrypt the data, 
    and write the decrypted data to the output file.
4. must write the RSA code
5. can use a library to implement AES-128 encryption
6. must choose an appropriate mode of operation for AES-128
7. OK to use direct RSA for this assignment

A random key -> AES-128 EN/DE
random key -> RSA EN/DE
"""

import math
from pydoc import plain
import random
from string import ascii_letters, ascii_uppercase
import sys
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

def gen_aes_key(size):
    # size = bytes
    key = ''
    for i in range(size):
        key+=random.choice(ascii_letters)
    return key.encode()
    
def encryption(RSA_key,txt_input):
    AES_KEY = gen_aes_key(16) # get_random_bytes(16)  128 bits = 16 bytes
    # print(AES_KEY)
    ciphertext = AES_encrypt(AES_KEY,txt_input)
    encrypted_AES_key = RSA_encrypt(RSA_key,AES_KEY)
    return [ciphertext,encrypted_AES_key]

def decryption(RSA_key,input):
    # input = [ciphertext,encrypted AES key]
    AES_KEY = RSA_decrypt(RSA_key,input[1])
    plaintext = AES_decrypt(AES_KEY,input[0])
    return plaintext

def AES_encrypt(key, message):
    pad_m = pad(message.encode(),16)
    cipher = AES.new(key, AES.MODE_ECB)
    ciphertext = cipher.encrypt(pad_m)
    ciphertext = int.from_bytes(ciphertext,'big')
    return ciphertext

def AES_decrypt(key, ciphertext):
    decipher = AES.new(key, AES.MODE_ECB)
    byte_p = ciphertext.to_bytes((ciphertext.bit_length()+7) // 8,'big')
    # print(byte_p)
    pad_p = decipher.decrypt(byte_p)
    unpad_p = unpad(pad_p,16)
    # print(unpad_p)
    return unpad_p

def RSA_encrypt(pub_key,aes_key):
    # key = pub key [e,n]
    int_key = int.from_bytes(aes_key,'big')
    # print(int_key)
    encrypted_key = pow(int_key,pub_key[0],pub_key[1])
    return encrypted_key

def RSA_decrypt(prv_key,ciphertext):
    # key = prv key [d,n]
    int_key = pow(ciphertext,prv_key[0],prv_key[1])
    str_key = int_key.to_bytes((int_key.bit_length()+7) // 8,'big')
    # print(str_key)
    return str_key

def load_key(key_file):
    key = []
    with open(key_file,'r') as f:
        lines = f.readlines()
        for line in lines:
            key.append(int(line[:-1])) # remove \n
    return key

def load_plaintxt_file(input_file):
    # assume only one line message
    with open(input_file,'r') as f:
        input = f.read()
        return input

def load_ciphertxt_file(input_file):
    # assume only one line message
    input = []
    with open(input_file,'r') as f:
        lines = f.readlines()
        for line in lines:
            input.append(int(line[:-1])) 
        return input

def write_to_file(output_file,output):
    with open(output_file,'w') as f:
        for item in output:
            f.write(str(item))
            f.write('\n')

def write_pt_to_file(output_file,output):
    with open("check_"+output_file,'w') as f:
            f.write(output.decode())
            # f.write('\n')

def main():
    if(len(sys.argv)<5):
        return
    mode = sys.argv[1]
    key_file = sys.argv[2]
    input_file = sys.argv[3]
    output_file = sys.argv[4]

    key = load_key(key_file) # pub[e,n]/prv[d,n]
    # plaintext[text] / ciphertext[ciphertext,encrypted key]
    # print(key)

    if(mode == '-e'):
        # encryption: pub key [e,n], plaintext
        # input [plaintext] assume one line
        # output ciphertext[ciphertext,encrypted key]
        input = load_plaintxt_file(input_file)
        print(input)
        encryption_output = encryption(key,input)
        write_to_file(output_file,encryption_output)
    else:
        # decryption: prv key, ciphertext
        # input [ciphertext,encrypted AES key]
        # output [plaintext]
        input = load_ciphertxt_file(input_file)
        # print(input)
        decryption_output = decryption(key,input)
        write_pt_to_file(output_file,decryption_output)
   
main()
# python ./crypt.py -e alice.pub secret.txt secret.cip
# python ./crypt.py -d alice.prv secret.cip secret.txt