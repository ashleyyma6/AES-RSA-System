"""
encrypt and decrypt data using AES-128 and RSA.
1. takes four command line arguments: 
    a single flag (-e or -d) indicating whether the program will encrypt or decrypt a message, 
    the name of the public or private key file to use (generated by keygen.py), 
    the name of the file to encrypt or decrypt, 
    and the name of the output file. 
        ./crypt.py -e alice.pub secret.txt secret.cip
        ./crypt.py -d alice.prv secret.cip secret.txt
2. To encrypt a file, the program must generate a random key K for AES-128 
    using random.SystemRandom or os.urandom(), 
    use the key K with AES-128 to encrypt the data fro m the input file, 
    use RSA with the public key file specified on the command line to encrypt K 
    (we refer to the encrypted K as K’ in the following), 
    and write the encrypted data and K’ to the output file. 
    The format of the output file (how to store K’ along with the encrypted data) is your choice.   
3. To decrypt a file, the program must read the encrypted data and K’ from the input file, 
    RSA-decrypt K’ to recover the key K, use K with AES-128 to decrypt the data, 
    and write the decrypted data to the output file.
4. must write the RSA code
5. can use a library to implement AES-128 encryption
6. must choose an appropriate mode of operation for AES-128
7. OK to use direct RSA for this assignment

A random key -> AES-128 EN/DE
random key -> RSA EN/DE
"""

from pydoc import plain
import random
import sys
from Crypto.Cipher import AES

def gen_aes_key(size):
    start = pow(2, size-1)
    stop = pow(2,size)
    r = random.SystemRandom().randrange(start, stop)
    return r
    
def encryption(RSA_key,txt_input):
    AES_KEY = gen_aes_key(128)
    ciphertext = AES_encrypt(AES_KEY,txt_input)
    encrypted_AES_key = RSA_encrypt(RSA_key,AES_KEY)
    return [ciphertext,encrypted_AES_key]

def decryption(RSA_key,input):
    AES_KEY = RSA_decrypt(RSA_key,input[1])
    plaintext = AES_decrypt(AES_KEY,input[0])
    return [plaintext]

def AES_encrypt(key, message):
    # key = 'abcdefghijklmnop'
    cipher = AES.new(key, AES.MODE_ECB)
    ciphertext = cipher.encrypt(message)
    ciphertext = ciphertext.encode("hex")
    return ciphertext

def AES_decrypt(key, ciphertext):
    # key = 'abcdefghijklmnop'
    decipher = AES.new(key, AES.MODE_ECB)
    plaintext = decipher.decrypt(ciphertext)
    return plaintext

def RSA_encrypt(pub_key,message):
    # key = pub key [n,e]
    ciphertext = pow(message,pub_key[1])%pub_key[0]
    return ciphertext

def RSA_decrypt(prv_key,ciphertext):
    # key = prv key [n,d]
    plaintext = pow(ciphertext,prv_key[1])%prv_key[0]
    return plaintext

def load_key(key_file):
    key = []
    with open(key_file,'r') as f:
        lines = f.readlines()
        for line in lines:
            key.append(line[:-1]) # remove \n
    return key

def load_file(input_file):
    # assume only one line message?
    with open(input_file,'r') as f:
        lines = f.readlines
        return lines

def write_to_file(output_file,output):
    with open(output_file,'w') as f:
        for item in output:
            f.write(item)
            f.write('\n')

def main():
    if(len(sys.argv)<5):
        return
    mode = sys.argv[1]
    key_file = sys.argv[2]
    input_file = sys.argv[3]
    output_file = sys.argv[4]

    key = load_key(key_file) # [x,x]
    input = load_file(input_file) # text

    if(mode == '-e'):
        # encryption: pub key, plaintext
        # input is only plaintext
        encryption_output = encryption(key,input)
        write_to_file(output_file,encryption_output)
    else:
        # decryption: prv key, ciphertext
        # input is [ciphertext,encrypted AES key]
        decryption_output = decryption(key,input)
        write_to_file(output_file,decryption_output)
   
main()